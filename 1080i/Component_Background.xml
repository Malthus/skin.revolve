<?xml version="1.0" encoding="UTF-8"?>
<includes>
    <variable name="SingleImageBackground">
        <value condition="!String.IsEmpty(ListItem.Art(fanart))">$INFO[ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(ListItem.Property(Fanart_Image))">$INFO[ListItem.Property(Fanart_Image)]</value>
        <value condition="!String.IsEmpty(ListItem.PicturePath)">$INFO[ListItem.PicturePath]</value>
        <value condition="!String.IsEmpty(ListItem.Property(BackgroundImage))">$INFO[ListItem.Property(BackgroundImage)]</value>

        <value condition="Container.Content(files) + Skin.HasSetting(Background.Image.FanartForFiles) + !String.StartsWith(Container.FolderPath,library)">$INFO[Container.FolderPath,,fanart.jpg]</value>
        
        <value condition="[Window.IsVisible(tvguide) | Window.IsVisible(tvchannels) | Window.IsVisible(tvrecordings) | Window.IsVisible(tvtimers) | Window.IsVisible(tvtimerrules) | Window.IsVisible(tvsearch)] + !String.IsEmpty(Skin.String(TVOption.BackgroundImage))">$INFO[Skin.String(TVOption.BackgroundImage)]</value>
        <value condition="Window.IsVisible(tvguide) | Window.IsVisible(tvchannels) | Window.IsVisible(tvrecordings) | Window.IsVisible(tvtimers) | Window.IsVisible(tvtimerrules) | Window.IsVisible(tvsearch)">special://skin/backgrounds/tv.jpg</value>

        <value condition="[Window.IsVisible(radioguide) | Window.IsVisible(radiochannels) | Window.IsVisible(radiorecordings) | Window.IsVisible(radiotimers) | Window.IsVisible(radiotimerrules) | Window.IsVisible(radiosearch)] + !String.IsEmpty(Skin.String(RadioOption.BackgroundImage))">$INFO[Skin.String(RadioOption.BackgroundImage)]</value>
        <value condition="Window.IsVisible(radioguide) | Window.IsVisible(radiochannels) | Window.IsVisible(radiorecordings) | Window.IsVisible(radiotimers) | Window.IsVisible(radiotimerrules) | Window.IsVisible(radiosearch)">special://skin/backgrounds/radio.jpg</value>

        <value condition="Window.IsVisible(videos) + !String.IsEmpty(Skin.String(VideosOption.BackgroundImage))">$INFO[Skin.String(VideosOption.BackgroundImage)]</value>
        <value condition="Window.IsVisible(videos)">special://skin/backgrounds/videos.jpg</value>

        <value condition="Window.IsVisible(music) + !String.IsEmpty(Skin.String(MusicOption.BackgroundImage))">$INFO[Skin.String(MusicOption.BackgroundImage)]</value>
        <value condition="Window.IsVisible(music)">special://skin/backgrounds/music.jpg</value>

        <value condition="Window.IsVisible(pictures) + !String.IsEmpty(Skin.String(PicturesOption.BackgroundImage))">$INFO[Skin.String(PicturesOption.BackgroundImage)]</value>
        <value condition="Window.IsVisible(pictures)">special://skin/backgrounds/pictures.jpg</value>

        <value condition="Window.IsVisible(games) + !String.IsEmpty(Skin.String(ProgramsOption.BackgroundImage))">$INFO[Skin.String(GamesOption.BackgroundImage)]</value>
        <value condition="Window.IsVisible(games)">special://skin/backgrounds/games.jpg</value>

        <value condition="Window.IsVisible(programs) + !String.IsEmpty(Skin.String(ProgramsOption.BackgroundImage))">$INFO[Skin.String(ProgramsOption.BackgroundImage)]</value>
        <value condition="Window.IsVisible(programs)">special://skin/backgrounds/programs.jpg</value>

        <value condition="Window.IsVisible(addonbrowser)">special://skin/backgrounds/addons.jpg</value>
        
        <value condition="Window.IsVisible(1101) + !String.IsEmpty(Skin.String(ActiveCustomOption.BackgroundImage))">$INFO[Skin.String(ActiveCustomOption.BackgroundImage)]</value>
        <value condition="Window.IsVisible(1101)">special://skin/backgrounds/items.jpg</value>

        <value condition="Window.IsVisible(1102) + !String.IsEmpty(Skin.String(ActiveCustomOption.BackgroundImage))">$INFO[Skin.String(ActiveCustomOption.BackgroundImage)]</value>
        <value condition="Window.IsVisible(1102)">special://skin/backgrounds/items.jpg</value>

        <value condition="Window.IsVisible(1103) + !String.IsEmpty(Skin.String(ActiveCustomOption.BackgroundImage))">$INFO[Skin.String(ActiveCustomOption.BackgroundImage)]</value>
        <value condition="Window.IsVisible(1103)">special://skin/backgrounds/default.jpg</value>
        
        <value condition="Window.IsVisible(1104) + !String.IsEmpty(Skin.String(FavouritesOption.BackgroundImage))">$INFO[Skin.String(FavouritesOption.BackgroundImage)]</value>
        <value condition="Window.IsVisible(1104)">special://skin/backgrounds/favourites.jpg</value>

        <value condition="Window.IsVisible(1120)">black.png</value>
        <value condition="Window.IsVisible(1121)">black.png</value>

        <value condition="Window.IsVisible(settings)">special://skin/backgrounds/settings.jpg</value>
        <value condition="Window.IsVisible(1150)">special://skin/backgrounds/exit.jpg</value>
        
        <value condition="Window.IsVisible(weather) + !String.IsEmpty(Skin.String(Background.Image.WeatherResource.Path)) + !String.Contains(Skin.String(Background.Image.WeatherResource.Path),multi)">resource://$INFO[Skin.String(Background.Image.WeatherResource.Path)]/$INFO[Window(Weather).Property(Current.FanartCode),,.jpg]</value>
        <value condition="Window.IsVisible(weather) + String.Contains(Skin.String(Background.Image.WeatherResource.Path),multi)">white.png</value>
        <value condition="Window.IsVisible(weather)">special://skin/backgrounds/weather.jpg</value>
        <value condition="Window.IsVisible(filemanager)">special://skin/backgrounds/filemanager.jpg</value>
        <value condition="Window.IsVisible(eventlog)">special://skin/backgrounds/eventlog.jpg</value>

        <value condition="Window.IsVisible(playersettings)">special://skin/backgrounds/playersettings.jpg</value>
        <value condition="Window.IsVisible(mediasettings)">special://skin/backgrounds/mediasettings.jpg</value>
        <value condition="Window.IsVisible(gamesettings)">special://skin/backgrounds/gamesettings.jpg</value>
        <value condition="Window.IsVisible(pvrsettings)">special://skin/backgrounds/pvrsettings.jpg</value>
        <value condition="Window.IsVisible(interfacesettings)">special://skin/backgrounds/interfacesettings.jpg</value>
        <value condition="Window.IsVisible(skinsettings)">special://skin/backgrounds/skinsettings.jpg</value>
        <value condition="Window.IsVisible(servicesettings)">special://skin/backgrounds/servicesettings.jpg</value>
        <value condition="Window.IsVisible(systemsettings)">special://skin/backgrounds/systemsettings.jpg</value>
        <value condition="Window.IsVisible(profiles)">special://skin/backgrounds/profiles.jpg</value>
        <value condition="Window.IsVisible(systeminfo)">special://skin/backgrounds/systeminfo.jpg</value>
        <value condition="Window.IsVisible(1151)">special://skin/backgrounds/skininfo.jpg</value>

        <value condition="Window.IsVisible(home) + !String.IsEmpty(Container(300).ListItem.Property(BackgroundImage))">$INFO[Container(300).ListItem.Property(BackgroundImage)]</value>
        <value condition="Window.IsVisible(home) + !String.IsEmpty(Container(300).ListItem.Property(FallbackImage))">$INFO[Container(300).ListItem.Property(FallbackImage)]</value>
        <value condition="Window.IsVisible(home)">special://skin/backgrounds/default.jpg</value>

        <value>special://skin/backgrounds/default.jpg</value>
    </variable>
    
    <variable name="MultiImageBackground">
        <value condition="Window.IsVisible(weather) + String.Contains(Skin.String(Background.Image.WeatherResource.Path),multi)">resource://$INFO[Skin.String(Background.Image.WeatherResource.Path)]/$INFO[Window(Weather).Property(Current.FanartCode)]</value>
        <value></value>
    </variable>

    <expression name="HasVideoInBackground">Player.HasVideo + Skin.HasSetting(Background.Video.Active) + !SlideShow.IsActive</expression>

    <expression name="HasVisualization">Player.HasAudio + Visualisation.Enabled + [Skin.HasSetting(Background.Visualiser.Active) | Skin.HasSetting(Background.Visualiser.RunHidden)]</expression>
    <expression name="HasVisualizationInBackground">$EXP[HasVisualization] + Skin.HasSetting(Background.Visualiser.Active) + !SlideShow.IsActive</expression>

    <expression name="HasSlideshowInBackground">Skin.HasSetting(Background.Slideshow.Active) + Skin.String(Background.Slideshow.ImagePath) + !$EXP[HasVideoInBackground] + !$EXP[HasVisualizationInBackground]</expression>

    <expression name="HasImage">!$EXP[HasVideoInBackground] + !$EXP[HasVisualizationInBackground] + !$EXP[HasSlideshowInBackground]</expression>
    <expression name="HasImageInBackground">Skin.HasSetting(Background.Image.Active) + $EXP[HasImage] + !SlideShow.IsActive</expression>

    <include name="GlobalBackground">
        <definition>
            <include content="VideoBackground" />
            <include content="MusicVisualizationBackground" />
            <include content="SlideshowBackground" />
            <include content="DefaultBackground" />
            <include content="ImageBackground" />
        </definition>
    </include>

    <include name="EmptyBackground">
        <definition>
            <control type="image">
                <include content="FullscreenDimensions" />
                <texture>black.png</texture>
            </control>
        </definition>
    </include>
    
    <include name="DefaultBackground">
        <definition>
            <control type="image">
                <visible>$EXP[HasImage]</visible>

                <include content="FullscreenDimensions" />
                <texture colordiffuse="$VAR[BackgroundColor]">white.png</texture>
            </control>
        </definition>
    </include>

    <include name="ImageBackground">
        <definition>
            <control type="group">
                <visible>$EXP[HasImageInBackground]</visible>

                <control type="image">
                    <include content="FadeAnimationForBackground" />
                    <include content="FullscreenDimensions" />
                    <fadetime>WindowFadeDuration</fadetime>
                    <texture background="true" fallback="special://skin/backgrounds/default.jpg">$VAR[SingleImageBackground]</texture>
                    <aspectratio scalediffuse="false">scale</aspectratio>
                </control>

                <control type="multiimage">
                    <include content="FadeAnimationForBackground" />
                    <include content="FullscreenDimensions" />
                    <timeperimage>8000</timeperimage>
                    <randomize>true</randomize>
                    <fadetime>WindowFadeDuration</fadetime>
                    <imagepath background="true">$VAR[MultiImageBackground]</imagepath>
                    <aspectratio scalediffuse="false">scale</aspectratio>
                </control>

                <control type="image">
                    <visible>Skin.HasSetting(Background.Image.Faded)</visible>
                    <include content="FadeAnimationForBackground" />
                    <include content="FullscreenDimensions" />
                    <fadetime>WindowFadeDuration</fadetime>
                    <texture colordiffuse="$VAR[FademaskColor]">white.png</texture>
                </control>
        </control>
        </definition>
    </include>

    <include name="SlideshowBackground">
        <definition>
            <control type="group">
                <visible>$EXP[HasSlideshowInBackground]</visible>

                <control type="multiimage">
                    <include content="FadeAnimationForBackground" />
                    <include content="FullscreenDimensions" />
                    <timeperimage>8000</timeperimage>
                    <randomize>true</randomize>
                    <fadetime>WindowFadeDuration</fadetime>
                    <imagepath background="true">$INFO[Skin.String(Background.Slideshow.ImagePath)]</imagepath>
                    <aspectratio scalediffuse="false">scale</aspectratio>
                </control>

                <control type="image">
                    <visible>Skin.HasSetting(Background.Slideshow.Faded)</visible>
                    <include content="FadeAnimationForBackground" />
                    <include content="FullscreenDimensions" />
                    <fadetime>WindowFadeDuration</fadetime>
                    <texture colordiffuse="$VAR[FademaskColor]">white.png</texture>
                </control>
        </control>
        </definition>
    </include>

    <include name="MusicVisualizationBackground">
        <definition>
            <control type="group">
                <visible>$EXP[HasVisualizationInBackground]</visible>

                <control type="visualisation">
                    <include content="FullscreenDimensions" />
                </control>
            
                <control type="image">
                    <visible>Skin.HasSetting(Background.Visualiser.Faded)</visible>
                    <include content="FullscreenDimensions" />
                    <fadetime>WindowFadeDuration</fadetime>
                    <texture colordiffuse="$VAR[FademaskColor]">white.png</texture>
                </control>
            </control>
        </definition>
    </include>

    <include name="VideoBackground">
        <definition>
            <control type="group">
                <visible>$EXP[HasVideoInBackground]</visible>

                <control type="videowindow">
                    <include content="FullscreenDimensions" />
                </control>
            
                <control type="image">
                    <visible>Skin.HasSetting(Background.Video.Faded)</visible>
                    <include content="FullscreenDimensions" />
                    <fadetime>WindowFadeDuration</fadetime>
                    <texture colordiffuse="$VAR[FademaskColor]">white.png</texture>
                </control>
            </control>
        </definition>
    </include>

    <include name="FadeAnimationForBackground">
        <definition>
            <animation effect="fade" start="0" end="100" time="WindowFadeDuration">WindowOpen</animation>
            <animation effect="fade" start="0" end="100" time="WindowFadeDuration">Visible</animation>
            <animation effect="fade" start="100" end="0" time="WindowFadeDuration">Hidden</animation>
            <animation effect="fade" start="100" end="0" time="WindowFadeDuration">WindowClose</animation>
        </definition>
    </include>
</includes>
